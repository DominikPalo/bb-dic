{"version":3,"sources":["../src/dic-config-loader.js"],"names":["_","require","DicConfigLoader","opts","options","defaults","optionsSuffix","dic","config","each","service","instance","aliases","alias","bindings","binding","containerName","child","getBoundContainer","loadConfig","imports","dicService","childService","containerSeparator","module","exports"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;;AAEA;;;;IAGMC,e;AACJ;;;;AAIA,6BAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAAA;;AACrB,SAAKC,OAAL,GAAeJ,EAAEK,QAAF,CAAWF,IAAX,EAAiB;AAC9BG,qBAAe;AADe,KAAjB,CAAf;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA2BWC,G,EAAKC,M,EAAQ;AAAA;;AACtBR,QAAES,IAAF,CAAOD,OAAOJ,OAAd,EAAuB,UAACD,IAAD,EAAOO,OAAP,EAAmB;AACxCH,YAAII,QAAJ,CAAaD,UAAU,MAAKN,OAAL,CAAaE,aAApC,EAAmDH,IAAnD;AACD,OAFD;;AAIAH,QAAES,IAAF,CAAOD,OAAOI,OAAd,EAAuB,UAACC,KAAD,EAAQH,OAAR,EAAoB;AACzCH,YAAIM,KAAJ,CAAUA,KAAV,EAAiBH,OAAjB;AACD,OAFD;;AAIAV,QAAES,IAAF,CAAOD,OAAOM,QAAd,EAAwB,UAACC,OAAD,EAAUC,aAAV,EAA4B;AAClD,YAAMC,QAAQV,IAAIW,iBAAJ,CAAsBF,aAAtB,CAAd;;AAEA,cAAKG,UAAL,CAAgBF,KAAhB,EAAuBF,OAAvB;;AAEAf,UAAES,IAAF,CAAOM,QAAQK,OAAf,EAAwB,UAACC,UAAD,EAAaC,YAAb,EAA8B;AACpDf,cAAIM,KAAJ,CAAUQ,UAAV,EAAsBL,gBAAgBT,IAAIH,OAAJ,CAAYmB,kBAA5B,GAAiDD,YAAvE;AACD,SAFD;AAGD,OARD;AASD;;;;;AAGHE,OAAOC,OAAP,GAAiBvB,eAAjB","file":"dic-config-loader.js","sourcesContent":["const _ = require('lodash');\n\n/**\n * Config loader - sets up Dic from the config (plain object)\n */\nclass DicConfigLoader {\n  /**\n   * @param {Object} opts\n   * @param {string} opts.optionsSuffix What suffix to use for \"options\" config. See: {@link DicConfigLoader#loadConfig}\n   */\n  constructor(opts = {}) {\n    this.options = _.defaults(opts, {\n      optionsSuffix: 'Opts'\n    });\n  }\n\n  /**\n   * Set up Dic according the config\n   *\n   * @example\n   * {\n   *   options: {\n   *     service1: { } // {} is registered as \"service1Opts\" instance\n   *   },\n   *   aliases: {\n   *     service2: 'service1' // \"service1\" is aliased to \"service2\"\n   *   },\n   *   bindings: {\n   *     package1: { // bind container name\n   *       imports: {\n   *         serviceA: 'service1' // \"service1\" from main container is imported into \"package1\" container as \"serviceA\"\n   *       },\n   *       //options for bind container, same as for main container i.e. `options`, `aliases`, ...\n   *     }\n   *   }\n   * }\n   *\n   * @param {Dic} dic\n   * @param {Object} config\n   * @param {Object} [config.options] Create plain object \"option\" instances\n   * @param {Object} [config.aliases] Create aliases\n   * @param {Object} [config.bindings] Set up bind Dic\n   */\n  loadConfig(dic, config) {\n    _.each(config.options, (opts, service) => {\n      dic.instance(service + this.options.optionsSuffix, opts);\n    });\n\n    _.each(config.aliases, (alias, service) => {\n      dic.alias(alias, service);\n    });\n\n    _.each(config.bindings, (binding, containerName) => {\n      const child = dic.getBoundContainer(containerName);\n\n      this.loadConfig(child, binding);\n\n      _.each(binding.imports, (dicService, childService) => {\n        dic.alias(dicService, containerName + dic.options.containerSeparator + childService);\n      });\n    });\n  }\n}\n\nmodule.exports = DicConfigLoader;\n"]}