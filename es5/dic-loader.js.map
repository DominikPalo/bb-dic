{"version":3,"sources":["../src/dic-loader.js"],"names":["_","require","nodePath","globby","DicLoader","opts","options","defaults","rootDir","process","cwd","debug","dic","path","ret","sync","p","mod","isObject","__esModule","default","basename","type","name","camelCase","match","console","log","registerClass","asyncFactory","factory","instance","Error","module","exports"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,WAAWD,QAAQ,MAAR,CAAjB;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;;AAEA;;;;;;;;;;;;;;;;IAeMG,S;AACJ;;;;AAIA,uBAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAAA;;AACrB,SAAKC,OAAL,GAAeN,EAAEO,QAAF,CAAWF,IAAX,EAAiB;AAC9BG,eAASC,QAAQC,GAAR,EADqB;AAE9BC,aAAO;AAFuB,KAAjB,CAAf;AAID;;AAED;;;;;;;;;;;;;;;;;;;;6BAgBSC,G,EAAKC,I,EAAM;AAClB,UAAMC,MAAMX,OAAOY,IAAP,CAAYF,IAAZ,EAAkB;AAC5BH,aAAK,KAAKJ,OAAL,CAAaE;AADU,OAAlB,CAAZ;AADkB;AAAA;AAAA;;AAAA;AAIlB,wDAAgBM,GAAhB,4GAAqB;AAAA,cAAVE,CAAU;;AACnB,cAAMH,QAAO,KAAKP,OAAL,CAAaE,OAAb,GAAuB,GAAvB,GAA6BQ,CAA1C;AACA,cAAIC,MAAMhB,QAAQY,KAAR,CAAV;;AAEA;AACA,cAAIb,EAAEkB,QAAF,CAAWD,GAAX,KAAmBA,IAAIE,UAAvB,IAAqCF,IAAIG,OAA7C,EAAsD;AACpDH,kBAAMA,IAAIG,OAAV;AACD;;AAED,cAAMC,WAAWnB,SAASmB,QAAT,CAAkBL,CAAlB,EAAqB,KAArB,CAAjB;;AAEA,cAAIM,OAAO,OAAX;AACA,cAAIC,OAAQvB,EAAEwB,SAAF,CAAYH,QAAZ,CAAZ;;AAEA,cAAMI,QAAQJ,SAASI,KAAT,CAAe,yCAAf,CAAd;AACA,cAAIA,KAAJ,EAAW;AACTF,mBAAOvB,EAAEwB,SAAF,CAAYC,MAAM,CAAN,CAAZ,CAAP;AACAH,mBAAOG,MAAM,CAAN,CAAP;AACD;;AAED,cAAI,KAAKnB,OAAL,CAAaK,KAAjB,EAAwB;AACtBe,oBAAQC,GAAR,iBAA0BJ,IAA1B,UAAmCD,IAAnC,aAA+CT,KAA/C;AACD;;AAED,kBAAOS,IAAP;AACE,iBAAK,OAAL;AACEV,kBAAIgB,aAAJ,CAAkBL,IAAlB,EAAwBN,GAAxB;AACA;AACF,iBAAK,eAAL;AACEL,kBAAIiB,YAAJ,CAAiBN,IAAjB,EAAuBN,GAAvB;AACA;AACF,iBAAK,SAAL;AACEL,kBAAIkB,OAAJ,CAAYP,IAAZ,EAAkBN,GAAlB;AACA;AACF,iBAAK,UAAL;AACEL,kBAAImB,QAAJ,CAAaR,IAAb,EAAmBN,GAAnB;AACA;AACF;AACE,oBAAM,IAAIe,KAAJ,WAAkBV,IAAlB,oBAAN;AAdJ;AAgBD;AA5CiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CnB;;;;;AAGHW,OAAOC,OAAP,GAAiB9B,SAAjB","file":"dic-loader.js","sourcesContent":["const _ = require('lodash');\nconst nodePath = require('path');\nconst globby = require('globby');\n\n/**\n * Dic loader\n *\n * @example // Registers all classes/factories/instances under `__dirname/src` folder.\n *\n * const {Dic, DicLoader} = require('@kapitchi/bb-dic');\n * const dic = new Dic();\n *\n * const loader = new DicLoader({\n *   rootDir: __dirname //if not specified process.cwd() is used by default\n * });\n * loader.loadPath(dic, 'src/*.js');\n *\n * module.exports = dic;\n */\nclass DicLoader {\n  /**\n   * @param {Object} opts\n   * @param {string} opts.rootDir Absolute path to root folder of source files. Default: `process.cwd()`\n   */\n  constructor(opts = {}) {\n    this.options = _.defaults(opts, {\n      rootDir: process.cwd(),\n      debug: false\n    });\n  }\n\n  /**\n   * Load all instances/factories/classes to {@link Dic}.\n   *\n   * File types and what they should export\n   * - name.js -> class\n   * - name.factory.js -> factory\n   * - name.async-factory.js -> async factory\n   * - name.instance.js -> instance\n   *\n   *\n   * File name dictates what name the service will be registered as.\n   * E.g. `my-service.js` service would become registered as `myService` => file name is camelCased.\n   *\n   * @param {Dic} dic\n   * @param {string} path glob expression {@link https://www.npmjs.com/package/globby}\n   */\n  loadPath(dic, path) {\n    const ret = globby.sync(path, {\n      cwd: this.options.rootDir\n    });\n    for (const p of ret) {\n      const path = this.options.rootDir + '/' + p;\n      let mod = require(path);\n\n      //es6 modules default export\n      if (_.isObject(mod) && mod.__esModule && mod.default) {\n        mod = mod.default;\n      }\n\n      const basename = nodePath.basename(p, '.js');\n\n      let type = 'class';\n      let name =  _.camelCase(basename);\n\n      const match = basename.match(/(.*)\\.(factory|async-factory|instance)$/);\n      if (match) {\n        name = _.camelCase(match[1]);\n        type = match[2];\n      }\n\n      if (this.options.debug) {\n        console.log(`DicLoader: ${name} [${type}] -> ${path}`);\n      }\n\n      switch(type) {\n        case 'class':\n          dic.registerClass(name, mod);\n          break;\n        case 'async-factory':\n          dic.asyncFactory(name, mod);\n          break;\n        case 'factory':\n          dic.factory(name, mod);\n          break;\n        case 'instance':\n          dic.instance(name, mod);\n          break;\n        default:\n          throw new Error(`Type ${type} not supported`);\n      }\n    }\n  }\n}\n\nmodule.exports = DicLoader;\n"]}