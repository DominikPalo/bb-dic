{"version":3,"sources":["../src/dic-loader.js"],"names":["_","require","nodePath","globby","DicLoader","opts","options","defaults","rootDir","process","cwd","debug","dic","path","prefix","ret","sync","relPath","absPath","mod","isObject","__esModule","default","basename","type","name","camelCase","match","pathParts","split","prefixParts","length","pop","push","map","val","index","upperFirst","join","isEmpty","console","log","class","asyncFactory","factory","instance","Error","module","exports"],"mappings":"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","file":"dic-loader.js","sourcesContent":["const _ = require('lodash');\nconst nodePath = require('path');\nconst globby = require('globby');\n\n/**\n * Dic loader\n *\n * @example // Registers all classes/factories/instances under `__dirname/src` folder.\n *\n * const {Dic, DicLoader} = require('@kapitchi/bb-dic');\n * const dic = new Dic();\n *\n * const loader = new DicLoader({\n *   rootDir: __dirname + '/src' //if not specified process.cwd() is used by default\n * });\n * loader.loadPath(dic, '*.js');\n *\n * module.exports = dic;\n */\nclass DicLoader {\n  /**\n   * @param {Object} opts\n   * @param {string} opts.rootDir Absolute path to root folder of source files. Default: `process.cwd()`\n   */\n  constructor(opts = {}) {\n    this.options = _.defaults(opts, {\n      rootDir: process.cwd(),\n      debug: false\n    });\n  }\n\n  /**\n   * Load all instances/factories/classes to {@link Dic}.\n   *\n   * File types and what they should export\n   * - name.js -> class\n   * - name.factory.js -> factory\n   * - name.async-factory.js -> async factory\n   * - name.instance.js -> instance\n   *\n   *\n   * File name dictates what name the service will be registered as.\n   * E.g. `my-service.js` service would become registered as `myService` => file name is camelCased.\n   *\n   * @param {Dic} dic\n   * @param {string} path glob expression {@link https://www.npmjs.com/package/globby}\n   * @param {Object} [opts]\n   * @param {string} [opts.prefix=''] Instance name prefix\n   * @param {string} [opts.rootDir] Overwrites loader's rootDir option\n   */\n  loadPath(dic, path, opts = {}) {\n    _.defaults(opts, {\n      prefix: ''\n    });\n\n    const ret = globby.sync(path, {\n      cwd: opts.rootDir ? opts.rootDir : this.options.rootDir\n    });\n    for (const relPath of ret) {\n      const absPath = this.options.rootDir + '/' + relPath;\n      let mod = require(absPath);\n\n      //es6 modules default export\n      if (_.isObject(mod) && mod.__esModule && mod.default) {\n        mod = mod.default;\n      }\n\n      const basename = nodePath.basename(relPath, '.js');\n\n      let type = 'class';\n      let name =  _.camelCase(basename);\n\n      const match = basename.match(/(.*)\\.(factory|async-factory|instance)$/);\n      if (match) {\n        name = _.camelCase(match[1]);\n        type = match[2];\n      }\n\n      const pathParts = relPath.split('/');\n      const prefixParts = opts.prefix ? [opts.prefix] : [];\n      if (pathParts.length > 1) {\n        //get rid of file name\n        pathParts.pop();\n        prefixParts.push(...pathParts);\n      }\n\n      const prefix = _.map(prefixParts, (val, index) => {\n        val = _.camelCase(val);\n        if (index > 0) {\n          val = _.upperFirst(val);\n        }\n        return val;\n      }).join('');\n\n      if (!_.isEmpty(prefix)) {\n        name = prefix + _.upperFirst(name);\n      }\n\n      if (this.options.debug) {\n        console.log(`DicLoader: ${name} [${type}] -> ${absPath}`);\n      }\n\n      switch(type) {\n        case 'class':\n          dic.class(name, mod);\n          break;\n        case 'async-factory':\n          dic.asyncFactory(name, mod);\n          break;\n        case 'factory':\n          dic.factory(name, mod);\n          break;\n        case 'instance':\n          dic.instance(name, mod);\n          break;\n        default:\n          throw new Error(`Type ${type} not supported`);\n      }\n    }\n  }\n}\n\nmodule.exports = DicLoader;\n"]}