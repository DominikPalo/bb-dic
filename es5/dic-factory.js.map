{"version":3,"sources":["../src/dic-factory.js"],"names":["_","require","Dic","DicConfigLoader","DicLoader","DicFactory","params","defaults","debug","dic","loaderRootDir","loaderPath","Error","loader","rootDir","loadPath","config","configLoader","loadConfig","fn","resolve","reject","ready","res","rej","err","emitter","resolveEvent","rejectEvent","resolveListener","rejectListener","removeListener","once","module","exports"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,MAAMD,QAAQ,OAAR,CAAZ;AACA,IAAME,kBAAkBF,QAAQ,qBAAR,CAAxB;AACA,IAAMG,YAAYH,QAAQ,cAAR,CAAlB;AACA;;;;IAGMI,U;;;;;;;;AACJ;;;;;;;;;;8BAUiBC,M,EAAQ;AACvBA,eAASN,EAAEO,QAAF,CAAWD,MAAX,EAAmB;AAC1BE,eAAO;AADmB,OAAnB,CAAT;;AAIA,UAAMC,MAAM,IAAIP,GAAJ,CAAQ;AAClBM,eAAOF,OAAOE;AADI,OAAR,CAAZ;;AAIA,UAAIF,OAAOI,aAAX,EAA0B;AACxB,YAAI,CAACJ,OAAOK,UAAZ,EAAwB;AACtB,gBAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD;AACD,YAAMC,SAAS,IAAIT,SAAJ,CAAc;AAC3BU,mBAASR,OAAOI,aADW;AAE3BF,iBAAOF,OAAOE;AAFa,SAAd,CAAf;AAIAK,eAAOE,QAAP,CAAgBN,GAAhB,EAAqBH,OAAOK,UAA5B;AACD;;AAED,UAAIL,OAAOU,MAAX,EAAmB;AACjB,YAAMC,eAAe,IAAId,eAAJ,CAAoB;AACvCK,iBAAOF,OAAOE;AADyB,SAApB,CAArB;AAGAS,qBAAaC,UAAb,CAAwBT,GAAxB,EAA6BH,OAAOU,MAApC;AACD;;AAED,aAAO;AACLP;AADK,OAAP;AAGD;;;0CAE4BU,E,EAAI;AAC/B,UAAIC,gBAAJ;AAAA,UAAaC,eAAb;AACA,UAAMC,QAAQ,sBAAY,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC3CJ,kBAAUG,GAAV;AACAF,iBAASG,GAAT;AACD,OAHa,CAAd;AAIAL,SAAG;AAAA,eAAOM,MAAMJ,OAAOI,GAAP,CAAN,GAAoBL,SAA3B;AAAA,OAAH;AACA,aAAOE,KAAP;AACD;;;yCAE2BI,O,EAASC,Y,EAAcC,W,EAAa;AAC9D,UAAIR,gBAAJ;AAAA,UAAaC,eAAb;AAAA,UAAqBQ,wBAArB;AAAA,UAAsCC,uBAAtC;;AAEA,UAAMR,QAAQ,sBAAY,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC3CJ,kBAAUG,GAAV;AACAF,iBAASG,GAAT;AACD,OAHa,CAAd;;AAKAK,wBAAkB,2BAAM;AACtB,YAAID,WAAJ,EAAiB;AACfF,kBAAQK,cAAR,CAAuBH,WAAvB,EAAoCE,cAApC;AACD;AACDV,gBAAQM,OAAR;AACD,OALD;;AAOAA,cAAQM,IAAR,CAAaL,YAAb,EAA2BE,eAA3B;;AAEA,UAAID,WAAJ,EAAiB;AACfE,yBAAiB,wBAACL,GAAD,EAAS;AACxBC,kBAAQK,cAAR,CAAuBJ,YAAvB,EAAqCE,eAArC;AACAR,iBAAOI,GAAP;AACD,SAHD;AAIAC,gBAAQM,IAAR,CAAaJ,WAAb,EAA0BE,cAA1B;AACD;;AAED,aAAOR,KAAP;AACD;;;;;AAGHW,OAAOC,OAAP,GAAiB7B,UAAjB","file":"dic-factory.js","sourcesContent":["const _ = require('lodash');\nconst Dic = require('./dic');\nconst DicConfigLoader = require('./dic-config-loader');\nconst DicLoader = require('./dic-loader');\n/**\n * A factory\n */\nclass DicFactory {\n  /**\n   * Creates DIC instance, uses loader and config loader\n   *\n   * @param {Object} params\n   * @param {bool} [params.debug=false]\n   * @param {string} [params.loaderRootDir] {@link DicLoader#constructor} If specified, `params.loaderPath` must be specified too.\n   * @param {string|string[]} [params.loaderPath] {@link DicLoader#loadPath}\n   * @param {Object} [params.config] {@link DicConfigLoader#loadConfig}\n   * @returns {{dic: Dic}}\n   */\n  static createDic(params) {\n    params = _.defaults(params, {\n      debug: false\n    });\n\n    const dic = new Dic({\n      debug: params.debug\n    });\n\n    if (params.loaderRootDir) {\n      if (!params.loaderPath) {\n        throw new Error('params.loaderPath must be defined');\n      }\n      const loader = new DicLoader({\n        rootDir: params.loaderRootDir,\n        debug: params.debug\n      });\n      loader.loadPath(dic, params.loaderPath);\n    }\n\n    if (params.config) {\n      const configLoader = new DicConfigLoader({\n        debug: params.debug\n      });\n      configLoader.loadConfig(dic, params.config);\n    }\n\n    return {\n      dic\n    }\n  }\n\n  static createCallbackPromise(fn) {\n    let resolve, reject;\n    const ready = new Promise(function(res, rej) {\n      resolve = res;\n      reject = rej;\n    });\n    fn(err => err ? reject(err) : resolve());\n    return ready;\n  }\n\n  static createEmitterPromise(emitter, resolveEvent, rejectEvent) {\n    let resolve, reject, resolveListener, rejectListener;\n\n    const ready = new Promise(function(res, rej) {\n      resolve = res;\n      reject = rej;\n    });\n\n    resolveListener = () => {\n      if (rejectEvent) {\n        emitter.removeListener(rejectEvent, rejectListener);\n      }\n      resolve(emitter);\n    };\n\n    emitter.once(resolveEvent, resolveListener);\n\n    if (rejectEvent) {\n      rejectListener = (err) => {\n        emitter.removeListener(resolveEvent, resolveListener);\n        reject(err);\n      };\n      emitter.once(rejectEvent, rejectListener);\n    }\n\n    return ready;\n  }\n}\n\nmodule.exports = DicFactory;\n"]}